#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <gtk/gtk.h>



GdkPixbuf *create_pixbuf(const gchar * filename);
void submit();
void Reg();
void SUclick();
void CBclick();



char CB='0';

GtkWidget *window;
GtkWidget *container;
GtkWidget *frame;
GtkWidget *labelU, *labelP, *labelCP, *labelErr, *labelRS;
GtkWidget *entryU, *entryP, *entryCP;
GtkWidget *login;
GtkWidget *checkBox;
GtkWidget *signupL, *signupS;


int main( int argc, char *argv[])
{

	

	gtk_init(&argc, &argv);

	window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
	gtk_window_set_title(GTK_WINDOW(window), "Casinò - Login");
	gtk_container_set_border_width (GTK_CONTAINER (window), 10);
	gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
	gtk_window_set_icon(GTK_WINDOW(window), create_pixbuf("icon.png"));
	g_signal_connect_swapped(G_OBJECT(window), "destroy", G_CALLBACK(gtk_main_quit), NULL);
	gtk_window_set_resizable(GTK_WINDOW(window), 0);
 	gtk_widget_show(window);

	GdkColor ORNGcolor, ERRcolor;
	ORNGcolor.red = 55255;
  	ORNGcolor.green = 23901;
  	ORNGcolor.blue = 10794;
	ERRcolor.red = 40000;
  	ERRcolor.green = 0;
  	ERRcolor.blue = 0;

	container = gtk_fixed_new();
  	gtk_container_add(GTK_CONTAINER(window), container);


	frame = gtk_frame_new(NULL);	
	gtk_widget_set_size_request(frame, 380, 207);	
	gtk_fixed_put(GTK_FIXED(container), frame, 0, 0);
	


	labelU = gtk_label_new ("Username:");
	gtk_fixed_put(GTK_FIXED(container), labelU, 25, 30);
	
	labelP = gtk_label_new ("Password:");
	gtk_fixed_put(GTK_FIXED(container), labelP, 25, 70);
	
	labelCP = gtk_label_new (" Confirm\nPassword:");
	gtk_fixed_put(GTK_FIXED(container), labelCP, 25, 100);

	labelErr = gtk_label_new ("");
	gtk_widget_modify_fg (labelErr, GTK_STATE_NORMAL, &ERRcolor);
	gtk_fixed_put(GTK_FIXED(container), labelErr, 5, 190);

	labelRS = gtk_label_new ("Registrazione \neffettuata con successo");
	gtk_widget_modify_fg (labelRS, GTK_STATE_NORMAL, &ORNGcolor);
	gtk_fixed_put(GTK_FIXED(container), labelRS, 5, 170);

	entryU = gtk_entry_new ();
	gtk_fixed_put(GTK_FIXED(container), entryU, 110, 25);
	gtk_entry_set_max_length (GTK_ENTRY (entryU), 256);
	gtk_widget_set_size_request(entryU, 260, 1);

	entryP = gtk_entry_new ();
	gtk_fixed_put(GTK_FIXED(container), entryP, 110, 65);
	gtk_entry_set_max_length (GTK_ENTRY (entryP), 256);
	gtk_widget_set_size_request(entryP, 260, 1);
	gtk_entry_set_visibility(entryP, 0);

	entryCP = gtk_entry_new ();
	gtk_fixed_put(GTK_FIXED(container), entryCP, 110, 105);
	gtk_entry_set_max_length (GTK_ENTRY (entryCP), 256);
	gtk_widget_set_size_request(entryCP, 260, 1);



	login = gtk_button_new_with_label("Login");
 	gtk_widget_set_size_request(login, 150, 25);
 	gtk_fixed_put(GTK_FIXED(container), login, 125, 110);
	gtk_widget_modify_fg (login, GTK_STATE_NORMAL, &ORNGcolor);
	g_signal_connect(G_OBJECT(login), "clicked", G_CALLBACK(submit), NULL);

	signupL = gtk_button_new_with_label ("Registrati");
 	gtk_widget_set_size_request(signupL, 150, 25);
	gtk_fixed_put(GTK_FIXED(container), signupL, 125, 140);
	gtk_label_set_pattern(signupL, "__ _______");
	g_signal_connect(G_OBJECT(signupL), "clicked", G_CALLBACK(SUclick), NULL);

	signupS = gtk_button_new_with_label ("Registrati");
 	gtk_widget_set_size_request(signupS, 150, 25);
	gtk_fixed_put(GTK_FIXED(container), signupS, 125, 155);
	gtk_label_set_pattern(signupS, "__ _______");
	gtk_widget_modify_fg (signupS, GTK_STATE_NORMAL, &ORNGcolor);
	g_signal_connect(G_OBJECT(signupS), "clicked", G_CALLBACK(Reg), NULL);

	checkBox = gtk_check_button_new_with_label("Resta connesso");
	gtk_fixed_put(GTK_FIXED(container), checkBox, 249, 184);
	g_signal_connect(G_OBJECT(checkBox), "clicked", G_CALLBACK(CBclick), NULL);

	
	

	gtk_widget_show_all(container);
	gtk_widget_hide(labelCP);
	gtk_widget_hide(signupS);
 	gtk_widget_hide(entryCP);
	gtk_widget_hide(labelErr);
	gtk_widget_hide(labelRS);

	gtk_main();

  return 0;
}

//g_print("\nusername:%s",username);

void submit()
{



}



void Reg()
{

	char username[256];
	char password[256];
	char cpassword[256];
	char msg[500];
	char errChar='0', errMsg[40];
	int i;

	char IP[16],IPdig;
	FILE *fp;

	strcpy(username,gtk_entry_get_text(entryU));
	strcpy(password,gtk_entry_get_text(entryP));
	strcpy(cpassword,gtk_entry_get_text(entryCP));

	
	if(strcmp(username,"")==0 || strcmp(password,"")==0 || strcmp(cpassword,"")==0)
	{
		gtk_label_set_text(labelErr,"I campi non possono rimanere vuoti");
		gtk_widget_show(labelErr);
		return 0;
	}

	for(i=0;i<strlen(username);i++)
	{
		if(username[i]=='%' || username[i]=='\'' || username[i]==' ')
		{
			errChar=username[i];			
			strcpy(errMsg,"Il carattere < > non è consentito (username)");
			errMsg[14]=errChar;			
			gtk_label_set_text(labelErr,errMsg);
			gtk_widget_show(labelErr);
			return 0;
		}		
	}
	
	for(i=0;i<strlen(password);i++)
	{
		if(password[i]=='%' || password[i]=='\'' || username[i]==' ')
		{
			errChar=password[i];			
			strcpy(errMsg,"Il carattere < > non è consentito (password)");
			errMsg[14]=errChar;			
			gtk_label_set_text(labelErr,errMsg);
			gtk_widget_show(labelErr);
			return 0;
		}		
	}

	if(strcmp(password,cpassword)!=0)
	{
		gtk_label_set_text(labelErr,"Le password non corrispondono");
		gtk_widget_show(labelErr);
		return 0;
	}
	
	strcpy(msg,"RGST%0%");
	strcat(msg,username);
	strcat(msg,"%");
	strcat(msg,password);

	int sockfd, portno, n;
	struct sockaddr_in serv_addr;
	struct hostent *server;
  	char buffer[256];

	portno = 54321;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd < 0)
	{ 
		gtk_label_set_text(labelErr,"Errore di connessione");
		gtk_widget_show(labelErr);
		close(sockfd);
		return 0;	
	}	
	fp = fopen("serverIP.txt","r");
	i=0;
	while((IPdig=fgetc(fp))!=EOF)
	{
		IP[i]=IPdig;
		i++;
	}
	IP[i-1]='\0';
	fclose(fp);
	server = gethostbyname(IP);
	if (server == NULL) 
	{ 
		gtk_label_set_text(labelErr,"Errore di connessione");
		gtk_widget_show(labelErr);
		close(sockfd);
		return 0;	
	}	

	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
	serv_addr.sin_port = htons(portno);
	if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
	{ 
		gtk_label_set_text(labelErr,"Errore di connessione");
		gtk_widget_show(labelErr);
		close(sockfd);
		return 0;	
	}	
	 
	bzero(buffer,256);
	strcpy(buffer,msg);
	n = write(sockfd,buffer,strlen(buffer));
	if (n < 0)
	{ 
		gtk_label_set_text(labelErr,"Errore di connessione");
		gtk_widget_show(labelErr);
		close(sockfd);
		return 0;	
	}	
	bzero(buffer,256);
	n = read(sockfd,buffer,256);
	if (n < 0)
	{ 
		gtk_label_set_text(labelErr,"Errore di connessione");
		gtk_widget_show(labelErr);
		close(sockfd);
		return 0;	
	}	
	if(strcmp(buffer,"RGST-ERR")==0)
	{	
		gtk_label_set_text(labelErr,"lo username inserito non è disponibile");
		gtk_widget_show(labelErr);
		return 0;
	}
	if(strcmp(buffer,"RGST-OK")==0)
	{
		gtk_widget_hide(labelCP);
		gtk_widget_hide(signupS);
		gtk_widget_hide(entryCP);
		gtk_widget_hide(labelErr);
		gtk_widget_show(signupL);
		gtk_widget_show(login);
		gtk_widget_show(checkBox);
		gtk_widget_show(labelRS);
		return 0;
	}

	close(sockfd);


	

}

void SUclick()
{
	gtk_widget_show(labelCP);
	gtk_widget_show(signupS);
	gtk_widget_show(entryCP);

	gtk_widget_hide(signupL);
	gtk_widget_hide(login);
	gtk_widget_hide(checkBox);
}

void CBclick()
{
	if(CB=='0') CB='1';
	else if(CB=='1') CB='0';
}


GdkPixbuf *create_pixbuf(const gchar * filename)
{
   GdkPixbuf *pixbuf;
   GError *error = NULL;
   pixbuf = gdk_pixbuf_new_from_file(filename, &error);
   if(!pixbuf) {
      fprintf(stderr, "%s\n", error->message);
      g_error_free(error);
   }

   return pixbuf;
}
